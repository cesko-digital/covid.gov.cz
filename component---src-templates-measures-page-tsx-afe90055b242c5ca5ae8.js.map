{"version":3,"sources":["webpack:///./src/components/measure-detail/measure-detail.tsx","webpack:///./src/components/measure-detail/getCurrentMeasureVersion.util.ts","webpack:///./src/components/client-only/client-only.tsx","webpack:///./src/templates/measures/page.tsx"],"names":["measure","t","useTranslation","hasRegion","Boolean","hash","useLocation","currentVersion","date","dateVersionHash","sortedFutureVersions","v","a","b","futureVersionToDisplayIndex","versionToDisplay","nextVersion","nextVersionFrom","nextVersionDate","isDisplayedVersionCurrent","nextVersionHash","getCurrentMeasureVersion","useState","hasMounted","setHasMounted","useEffect","useHasMounted","hasSourceLink","hasTimeConstraint","title","subtitle","lastUpdated","processedContent","beforeContent","key","className","variant","reactStringReplace","href","datetime","suffix","regions","region","displayTime","validFrom","validTo","valid_to","to","uri","isMobile","last_updated","query","data","pageContext","relatedMeasures","id","name","path","isActive","theme","hasTransparentHeader","showSearchInHeader","showBackgroundImage","description","pagePath","htmlLanguage","langcode","datePublished","dateModified","langCode","isBlogPost","breadcrumbItems","url","alias","items","menu","linkBack","slug","titleIconCode","code","hideMenuOnMobile"],"mappings":"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","file":"component---src-templates-measures-page-tsx-afe90055b242c5ca5ae8.js","sourcesContent":["import React from 'react';\nimport reactStringReplace from 'react-string-replace';\n\nimport Link from '@/components/link';\nimport { IMeasureDetailFragment } from '@graphql-types';\nimport { useLocation } from '@reach/router';\nimport { graphql } from 'gatsby';\nimport TopicDetail from '../topic-detail';\nimport { useTranslation } from '../i18n';\nimport { RegionsMarker, TimeMarker } from '../marker';\nimport LastUpdate from '../last-update';\nimport { UpdateWarning } from '../update-warning/update-warning';\nimport Time from '../time';\nimport { getCurrentMeasureVersion } from './getCurrentMeasureVersion.util';\nimport { useHasMounted } from '../client-only';\n\ninterface IProps {\n  measure: IMeasureDetailFragment;\n}\n\nconst MeasureDetail: React.FC<IProps> = ({ measure }) => {\n  const { t } = useTranslation();\n  const hasRegion = Boolean(measure?.relationships?.region?.length);\n  const { hash } = useLocation();\n  const hasMounted = useHasMounted();\n  const {\n    versionToDisplay,\n    isDisplayedVersionCurrent,\n    nextVersionFrom,\n    nextVersionHash,\n  } = getCurrentMeasureVersion(hasMounted ? hash : '', measure);\n  const hasSourceLink = Boolean(versionToDisplay.source);\n  const hasTimeConstraint = Boolean(\n    versionToDisplay?.valid_from || versionToDisplay?.valid_to,\n  );\n\n  return (\n    <>\n      <TopicDetail\n        title={measure.title}\n        subtitle={measure.norm}\n        lastUpdated={measure?.last_updated}\n        processedContent={versionToDisplay?.content?.processed}\n        beforeContent={\n          <>\n            {!isDisplayedVersionCurrent && (\n              <UpdateWarning\n                key={`${measure.path.alias}-current`}\n                className=\"position-relative\"\n                variant=\"alert\"\n                title={reactStringReplace(\n                  reactStringReplace(\n                    t('measure_valid_from'),\n                    /{{(.*)}}/,\n                    (match) => (\n                      <a\n                        href=\"#\"\n                        className=\"stretched-link\"\n                        key=\"current-version-link\"\n                      >\n                        {match}\n                      </a>\n                    ),\n                  ),\n                  '{date}',\n                  () => (\n                    <Time\n                      datetime={versionToDisplay?.valid_from}\n                      suffix=\"\"\n                      key=\"current-version-time\"\n                    />\n                  ),\n                )}\n              />\n            )}\n            {nextVersionFrom && (\n              <UpdateWarning\n                key={`${measure.path.alias}-future`}\n                className=\"position-relative\"\n                variant=\"info\"\n                title={reactStringReplace(\n                  reactStringReplace(\n                    t('measure_changes'),\n                    /{{(.*)}}/,\n                    (match) => (\n                      <a\n                        href={nextVersionHash}\n                        className=\"stretched-link\"\n                        key=\"next-version-link\"\n                      >\n                        {match}\n                      </a>\n                    ),\n                  ),\n                  '{date}',\n                  () => (\n                    <Time\n                      datetime={nextVersionFrom}\n                      suffix=\"\"\n                      key=\"next-version-time\"\n                    />\n                  ),\n                )}\n              />\n            )}\n          </>\n        }\n      />\n      <div className=\"bg-white mb-3 pb-2 pb-md-0 px-2 px-md-3\">\n        {hasRegion && (\n          <RegionsMarker regions={measure?.relationships?.region} />\n        )}\n        {hasTimeConstraint && (\n          <TimeMarker\n            displayTime\n            validFrom={versionToDisplay?.valid_from}\n            validTo={versionToDisplay?.valid_to}\n          />\n        )}\n        {hasSourceLink && (\n          <div className=\"pt-2\">\n            <hr />\n            <h3 className=\"mb-1 color-blue-dark\">{t('related')}</h3>\n            <div>\n              <Link\n                className=\"color-blue mb-1\"\n                to={versionToDisplay.source.uri}\n              >\n                {versionToDisplay.source.title}\n              </Link>\n            </div>\n          </div>\n        )}\n        <LastUpdate isMobile lastUpdated={measure?.last_updated} />\n      </div>\n    </>\n  );\n};\n\nexport const query = graphql`\n  fragment MeasureDetail on measure {\n    title\n    norm\n    content: description {\n      processed\n    }\n    source {\n      uri\n      title\n    }\n    relationships {\n      region {\n        name\n      }\n      situation_type: measure_type {\n        name\n        path {\n          alias\n        }\n      }\n      related_situations: situation {\n        title\n        path {\n          alias\n          langcode\n        }\n      }\n      versions {\n        content {\n          processed\n        }\n        valid_from\n        valid_to\n        source {\n          uri\n          title\n        }\n      }\n    }\n    path {\n      alias\n    }\n    changed\n    valid_from\n    valid_to\n    last_updated\n  }\n`;\n\nexport default MeasureDetail;\n","import { IMeasureDetailFragment } from '@graphql-types';\n\nexport const getCurrentMeasureVersion = (\n  dateVersionHash: string,\n  measure: IMeasureDetailFragment,\n) => {\n  const currentVersion = measure;\n  const date = dateVersionHash.replace('#', '');\n  const sortedFutureVersions =\n    measure?.relationships?.versions\n      .filter((v) => v.valid_from > currentVersion?.valid_from)\n      .sort((a, b) => (a.valid_from > b.valid_from ? 1 : -1)) ?? [];\n\n  const futureVersionToDisplayIndex = sortedFutureVersions.findIndex(\n    (v) => v.valid_from.replace(/T.*/, '') === date,\n  );\n  const futureVersion = sortedFutureVersions[futureVersionToDisplayIndex];\n  const versionToDisplay = futureVersion || currentVersion;\n\n  const nextVersion = sortedFutureVersions[futureVersionToDisplayIndex + 1];\n  const nextVersionFrom = nextVersion ? nextVersion.valid_from : '';\n  const nextVersionDate = nextVersionFrom.replace(/T.*/, '');\n  const nextVersionHash = nextVersionDate ? `#${nextVersionDate}` : undefined;\n  const isDisplayedVersionCurrent = futureVersionToDisplayIndex === -1;\n\n  return {\n    versionToDisplay,\n    isDisplayedVersionCurrent,\n    nextVersionFrom,\n    nextVersionHash,\n  };\n};\n","import { useState, useEffect } from 'react';\n\nexport const useHasMounted = () => {\n  const [hasMounted, setHasMounted] = useState(false);\n  useEffect(() => {\n    setHasMounted(true);\n  }, []);\n  return hasMounted;\n};\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { IMeasurePageQuery, ISitePageContext } from 'graphql-types';\nimport { SchemaComp } from '@/components/schema/schema';\nimport { SEO as Seo } from 'gatsby-plugin-seo';\nimport Layout from '@/layouts/default-layout';\nimport MeasureDetail from '@/components/measure-detail';\nimport DesktopLeftMenuLayout from '@/layouts/desktop-left-menu-layout';\nimport CategoryItemList from '@/components/category-item-list';\nimport Container from '@/components/container';\nimport Breadcrumb from '@/components/breadcrumb';\nimport { useTranslation } from '@/components/i18n';\n\ninterface IProps {\n  data: IMeasurePageQuery;\n  pageContext: ISitePageContext;\n}\n\nconst Page: React.FC<IProps> = ({ data, pageContext }) => {\n  const { t } = useTranslation();\n  const relatedMeasures: React.ComponentProps<\n    typeof CategoryItemList\n  >['items'] = data.measureType.relationships.measure.map((measure) => ({\n    id: measure.id,\n    name: measure.title,\n    path: measure.path.alias,\n    isActive: measure.path.alias === pageContext.slug,\n    theme: 'white',\n  }));\n\n  return (\n    <Layout\n      pageContext={pageContext}\n      hasTransparentHeader={false}\n      showSearchInHeader\n      showBackgroundImage={false}\n    >\n      <Seo\n        title={data.measure.title}\n        description={\n          data.measure.meta_description || t('current_measures_overview_meta')\n        }\n        pagePath={data.measure.path.alias}\n        htmlLanguage={data.measure.langcode}\n      />\n      <SchemaComp\n        datePublished={\n          data.measure.valid_from\n            ? data.measure.valid_from\n            : data.measure.created\n        }\n        dateModified={data.measure.changed}\n        title={data.measure.title}\n        langCode={data.measure.langcode}\n        isBlogPost\n        description={data.measure.meta_description}\n        breadcrumbItems={[\n          { title: t('home'), url: '/' },\n          {\n            title: t('current_measures'),\n            url: t(`slug_measures`),\n          },\n          {\n            title: data.measure.relationships?.situation_type?.name,\n            url: data.measure.relationships?.situation_type?.path?.alias,\n          },\n          data.measure.title,\n        ]}\n      />\n      <Container>\n        <div className=\"pt-1 pb-1 pt-md-3 pb-md-3\">\n          <Breadcrumb\n            items={[\n              { title: t('home'), url: '/' },\n              {\n                title: t('current_measures'),\n                url: t(`slug_measures`),\n              },\n              {\n                title: data.measure.relationships?.measure_type?.name,\n                url: data.measure.relationships?.measure_type?.path?.alias,\n              },\n              data.measure.title,\n            ]}\n          />\n        </div>\n        <DesktopLeftMenuLayout\n          theme=\"white\"\n          menu={\n            <CategoryItemList\n              theme=\"white\"\n              items={relatedMeasures}\n              linkBack={{\n                slug: pageContext.listSlug,\n                title: t('current_measures'),\n              }}\n              title={data.measureType.name}\n              titleIconCode={data.measureType?.relationships?.icon?.code}\n            />\n          }\n          hideMenuOnMobile\n        >\n          <MeasureDetail measure={data.measure} />\n        </DesktopLeftMenuLayout>\n      </Container>\n    </Layout>\n  );\n};\nexport default Page;\n\nexport const query = graphql`\n  query MeasurePage($slug: String!, $listSlug: String!, $langCode: String!) {\n    measure(path: { alias: { eq: $slug }, langcode: { eq: $langCode } }) {\n      title\n      meta_description\n      content: description {\n        processed\n      }\n      path {\n        alias\n      }\n      langcode\n      valid_from\n      created\n      relationships {\n        region {\n          name\n        }\n        measure_type {\n          name\n          path {\n            alias\n          }\n        }\n        related_situations: situation {\n          title\n        }\n      }\n      ...MeasureDetail\n    }\n    measureType(path: { alias: { eq: $listSlug } }) {\n      name\n      path {\n        alias\n      }\n      relationships {\n        icon {\n          code\n        }\n        measure {\n          id\n          title\n          path {\n            alias\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}
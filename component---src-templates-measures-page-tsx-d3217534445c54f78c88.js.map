{"version":3,"sources":["webpack:///./src/components/category-item-list/category-item-list.module.scss","webpack:///./src/components/measure-detail/measure-detail.tsx","webpack:///./src/templates/measures/page.tsx","webpack:///./src/components/time/time.tsx","webpack:///./src/components/subtitle/subtitle.module.scss","webpack:///./src/layouts/desktop-left-menu-layout.tsx","webpack:///./src/components/topic-detail/topic-detail.module.scss","webpack:///./src/components/headline/headline.tsx","webpack:///./src/components/breadcrumb/breadcrumb.tsx","webpack:///./src/components/headline/headline.module.scss","webpack:///./src/layouts/desktop-left-menu-layout.module.scss","webpack:///./src/components/category-item/category-item.tsx","webpack:///./node_modules/@material-ui/icons/esm/KeyboardArrowLeft.js","webpack:///./src/components/category-item-list/category-item-list.tsx","webpack:///./src/components/category-item-list/measure-area-list.tsx","webpack:///./src/components/category-item-list/situation-area-list.tsx","webpack:///./src/components/last-update/last-update.tsx","webpack:///./src/components/subtitle/subtitle.tsx","webpack:///./src/components/topic-detail/topic-detail.tsx","webpack:///./src/components/last-update/last-update.module.scss","webpack:///./node_modules/@material-ui/icons/esm/Room.js","webpack:///./node_modules/@material-ui/icons/esm/Event.js","webpack:///./src/components/marker/marker.tsx","webpack:///./src/components/content-icon/index.tsx","webpack:///./src/components/content-icon/content-icon.tsx","webpack:///./src/components/breadcrumb/breadcrumb.module.scss","webpack:///./src/components/category-item/category-item.module.scss"],"names":["module","exports","measure","t","useTranslation","hasSourceLink","Boolean","hasRegion","hasTimeConstraint","title","subtitle","lastUpdated","processedContent","processed","className","regions","region","displayTime","validFrom","validTo","valid_to","to","uri","isMobile","last_updated","query","data","pageContext","relatedMeasures","id","name","path","isActive","theme","hasTransparentHeader","showSearchInHeader","showBackgroundImage","description","pagePath","htmlLanguage","langcode","datePublished","dateModified","langCode","isBlogPost","breadcrumbItems","url","alias","items","menu","linkBack","slug","titleIconCode","code","hideMenuOnMobile","datetime","prefix","suffix","dateConfig","year","month","day","hour","minute","timeZone","dateTime","Date","toLocaleString","children","classNames","styles","main","iconCode","color","getBreadcrumbClasses","variant","classes","getItemClasses","index","aria-label","key","item","isNavItem","categoryItemTitle","chevron","style","fontSize","createSvgIcon","createElement","d","currentLanguage","useCurrentLanguage","collator","Intl","a","b","styledTitle","i","acc","header","icon","dangerouslySetInnerHTML","__html","currentActiveSlug","listItems","relationships","topicDetail","Marker","RegionsMarker","TimeMarker","iconClassName"],"mappings":"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","file":"component---src-templates-measures-page-tsx-d3217534445c54f78c88.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"whiteTheme\":\"category-item-list-module--whiteTheme--3G9VO\",\"header\":\"category-item-list-module--header--32CZs\",\"isActive\":\"category-item-list-module--isActive--1zttv\",\"blueTheme\":\"category-item-list-module--blueTheme--1VfSe\",\"wrapper\":\"category-item-list-module--wrapper--2l6te\",\"icon\":\"category-item-list-module--icon--3Y5rx\",\"chevron\":\"category-item-list-module--chevron--cmaV2\",\"linkBack\":\"category-item-list-module--linkBack--K051_\"};","import React from 'react';\n\nimport Link from '@/components/link';\nimport { IMeasureDetailFragment } from '@graphql-types';\nimport { graphql } from 'gatsby';\nimport TopicDetail from '../topic-detail';\nimport { useTranslation } from '../i18n';\nimport { RegionsMarker, TimeMarker } from '../marker';\nimport LastUpdate from '../last-update';\n\ninterface IProps {\n  measure: IMeasureDetailFragment;\n}\n\nconst MeasureDetail: React.FC<IProps> = ({ measure }) => {\n  const { t } = useTranslation();\n  const hasSourceLink = Boolean(measure.source);\n  const hasRegion = Boolean(measure?.relationships?.region?.length);\n  const hasTimeConstraint = Boolean(measure?.valid_from || measure?.valid_to);\n\n  return (\n    <>\n      <TopicDetail\n        title={measure.title}\n        subtitle={measure.norm}\n        lastUpdated={measure?.last_updated}\n        processedContent={measure?.content?.processed}\n      />\n      <div className=\"bg-white mb-3 pb-2 pb-md-0 px-2 px-md-3\">\n        {hasRegion && (\n          <RegionsMarker regions={measure?.relationships?.region} />\n        )}\n        {hasTimeConstraint && (\n          <TimeMarker\n            displayTime\n            validFrom={measure?.valid_from}\n            validTo={measure?.valid_to}\n          />\n        )}\n        {hasSourceLink && (\n          <div className=\"pt-2\">\n            <hr />\n            <h3 className=\"mb-1 color-blue-dark\">{t('related')}</h3>\n            <div>\n              <Link className=\"color-blue mb-1\" to={measure.source.uri}>\n                {measure.source.title}\n              </Link>\n            </div>\n          </div>\n        )}\n        <LastUpdate isMobile lastUpdated={measure?.last_updated} />\n      </div>\n    </>\n  );\n};\n\nexport const query = graphql`\n  fragment MeasureDetail on measure {\n    title\n    norm\n    content: description {\n      processed\n    }\n    source {\n      uri\n      title\n    }\n    relationships {\n      region {\n        name\n      }\n      situation_type: measure_type {\n        name\n        path {\n          alias\n        }\n      }\n      related_situations: situation {\n        title\n        path {\n          alias\n          langcode\n        }\n      }\n    }\n    path {\n      alias\n    }\n    changed\n    valid_from\n    valid_to\n    last_updated\n  }\n`;\n\nexport default MeasureDetail;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { IMeasurePageQuery, ISitePageContext } from 'graphql-types';\nimport { SchemaComp } from '@/components/schema/schema';\nimport { SEO as Seo } from 'gatsby-plugin-seo';\nimport Layout from '@/layouts/default-layout';\nimport MeasureDetail from '@/components/measure-detail';\nimport DesktopLeftMenuLayout from '@/layouts/desktop-left-menu-layout';\nimport CategoryItemList from '@/components/category-item-list';\nimport Container from '@/components/container';\nimport Breadcrumb from '@/components/breadcrumb';\nimport { useTranslation } from '@/components/i18n';\n\ninterface IProps {\n  data: IMeasurePageQuery;\n  pageContext: ISitePageContext;\n}\n\nconst Page: React.FC<IProps> = ({ data, pageContext }) => {\n  const { t } = useTranslation();\n  const relatedMeasures: React.ComponentProps<\n    typeof CategoryItemList\n  >['items'] = data.measureType.relationships.measure.map((measure) => ({\n    id: measure.id,\n    name: measure.title,\n    path: measure.path.alias,\n    isActive: measure.path.alias === pageContext.slug,\n    theme: 'white',\n  }));\n\n  return (\n    <Layout\n      pageContext={pageContext}\n      hasTransparentHeader={false}\n      showSearchInHeader\n      showBackgroundImage={false}\n    >\n      <Seo\n        title={data.measure.title}\n        description={\n          data.measure.meta_description || t('current_measures_overview_meta')\n        }\n        pagePath={data.measure.path.alias}\n        htmlLanguage={data.measure.langcode}\n      />\n      <SchemaComp\n        datePublished={\n          data.measure.valid_from\n            ? data.measure.valid_from\n            : data.measure.created\n        }\n        dateModified={data.measure.changed}\n        title={data.measure.title}\n        langCode={data.measure.langcode}\n        isBlogPost\n        description={data.measure.meta_description}\n        breadcrumbItems={[\n          { title: t('home'), url: '/' },\n          {\n            title: t('current_measures'),\n            url: t(`slug_measures`),\n          },\n          {\n            title: data.measure.relationships?.situation_type?.name,\n            url: data.measure.relationships?.situation_type?.path?.alias,\n          },\n          data.measure.title,\n        ]}\n      />\n      <Container>\n        <div className=\"pt-1 pb-1 pt-md-3 pb-md-3\">\n          <Breadcrumb\n            items={[\n              { title: t('home'), url: '/' },\n              {\n                title: t('current_measures'),\n                url: t(`slug_measures`),\n              },\n              {\n                title: data.measure.relationships?.measure_type?.name,\n                url: data.measure.relationships?.measure_type?.path?.alias,\n              },\n              data.measure.title,\n            ]}\n          />\n        </div>\n        <DesktopLeftMenuLayout\n          theme=\"white\"\n          menu={\n            <CategoryItemList\n              theme=\"white\"\n              items={relatedMeasures}\n              linkBack={{\n                slug: pageContext.listSlug,\n                title: t('current_measures'),\n              }}\n              title={data.measureType.name}\n              titleIconCode={data.measureType?.relationships?.icon?.code}\n            />\n          }\n          hideMenuOnMobile\n        >\n          <MeasureDetail measure={data.measure} />\n        </DesktopLeftMenuLayout>\n      </Container>\n    </Layout>\n  );\n};\nexport default Page;\n\nexport const query = graphql`\n  query MeasurePage($slug: String!, $listSlug: String!, $langCode: String!) {\n    measure(path: { alias: { eq: $slug }, langcode: { eq: $langCode } }) {\n      title\n      meta_description\n      content: description {\n        processed\n      }\n      path {\n        alias\n      }\n      langcode\n      valid_from\n      created\n      relationships {\n        region {\n          name\n        }\n        measure_type {\n          name\n          path {\n            alias\n          }\n        }\n        related_situations: situation {\n          title\n        }\n      }\n      ...MeasureDetail\n    }\n    measureType(path: { alias: { eq: $listSlug } }) {\n      name\n      path {\n        alias\n      }\n      relationships {\n        icon {\n          code\n        }\n        measure {\n          id\n          title\n          path {\n            alias\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\n\ninterface Props {\n  datetime: string;\n  displayTime?: boolean;\n  prefix?: string;\n  suffix?: string;\n}\n\nconst Time: React.FC<Props> = ({\n  datetime,\n  displayTime,\n  prefix,\n  suffix = ' ',\n}) => {\n  const dateConfig = {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: displayTime ? '2-digit' : undefined,\n    minute: displayTime ? '2-digit' : undefined,\n    timeZone: 'Europe/Prague',\n  };\n  return (\n    <time dateTime={datetime}>\n      {prefix}\n      {new Date(datetime).toLocaleString('cs-CZ', dateConfig)}\n      {suffix}\n    </time>\n  );\n};\n\nexport default Time;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"subtitle\":\"subtitle-module--subtitle--3-_JB\"};","import React from 'react';\nimport classNames from 'classnames';\n\nimport styles from './desktop-left-menu-layout.module.scss';\n\ninterface IProps {\n  menu: React.ReactNode;\n  hideMenuOnMobile?: boolean;\n  theme: 'white' | 'blue';\n}\n\nconst DesktopLeftMenuLayout: React.FC<IProps> = ({\n  menu,\n  children,\n  hideMenuOnMobile,\n  theme,\n}) => {\n  return (\n    <div\n      className={classNames({\n        [styles.wrapper]: true,\n        [styles.whiteTheme]: theme === 'white',\n        [styles.blueTheme]: theme === 'blue',\n      })}\n    >\n      <nav className={classNames({ [styles.hideOnMobile]: hideMenuOnMobile })}>\n        {menu}\n      </nav>\n      <div className={styles.main}>{children}</div>\n    </div>\n  );\n};\n\nexport default DesktopLeftMenuLayout;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topicDetail\":\"topic-detail-module--topicDetail--kRP4b\",\"article\":\"topic-detail-module--article--2LWJk\"};","import classNames from 'classnames';\nimport React from 'react';\nimport ContentIcon from '../content-icon';\n\nimport styles from './headline.module.scss';\n\ninterface IProps {\n  iconCode?: string;\n  className?: string;\n  color: 'blue' | 'white';\n}\n\nconst Headline: React.FC<IProps> = ({\n  iconCode,\n  className,\n  children,\n  color,\n}) => {\n  return (\n    <div className={classNames(className, styles.headlineWrapper)}>\n      <h1 className={classNames(styles.headline)}>\n        {iconCode && (\n          <ContentIcon className={styles.headlineIcon} code={iconCode} />\n        )}\n        <span\n          className={classNames({\n            'color-blue': color === 'blue',\n            'color-white': color === 'white',\n          })}\n        >\n          {children}\n        </span>\n      </h1>\n      <hr />\n    </div>\n  );\n};\n\nexport default Headline;\n","import classNames from 'classnames';\nimport React from 'react';\nimport Link from '../link';\nimport classes from './breadcrumb.module.scss';\n\ninterface INavItem {\n  title: string;\n  url: string;\n}\n\ninterface IProps {\n  items: (string | INavItem)[];\n  variant?: 'normal' | 'inverse';\n}\n\nconst isNavItem = (item: any): item is INavItem => {\n  return (item as INavItem).title !== undefined;\n};\n\nconst getBreadcrumbClasses = (variant: IProps['variant']): string => {\n  return classNames('breadcrumb', classes.breadcrumbContainer, {\n    'breadcrumb--inverse': variant === 'inverse',\n  });\n};\n\nconst Breadcrumb: React.FC<IProps> = ({ items, variant = 'normal' }) => {\n  const getItemClasses = (index: number): string => {\n    return classNames('breadcrumb__item', classes.breadcrumbItem, {\n      'breadcrumb__item--active': index === items.length - 1,\n    });\n  };\n\n  return (\n    <nav className=\"breadcrumbs\" aria-label=\"breadcrumb\">\n      <ol className={getBreadcrumbClasses(variant)}>\n        {items.map((item, index) => {\n          return (\n            <li\n              key={`breadcrumb-item-${index}`}\n              className={getItemClasses(index)}\n            >\n              {isNavItem(item) ? (\n                <Link\n                  to={item.url}\n                  className=\"breadcrumb__link\"\n                  title={item.title}\n                />\n              ) : (\n                <span className=\"breadcrumb__link\">{item}</span>\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headlineWrapper\":\"headline-module--headlineWrapper--1KseK\",\"headline\":\"headline-module--headline--2EZlD\",\"headlineIcon\":\"headline-module--headlineIcon--3wPWI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"whiteTheme\":\"desktop-left-menu-layout-module--whiteTheme--eds4O\",\"blueTheme\":\"desktop-left-menu-layout-module--blueTheme--2rS9O\",\"wrapper\":\"desktop-left-menu-layout-module--wrapper--2FRhZ\",\"hideOnMobile\":\"desktop-left-menu-layout-module--hideOnMobile--3x5nP\",\"main\":\"desktop-left-menu-layout-module--main--2USeX\"};","import classNames from 'classnames';\nimport { KeyboardArrowRight } from '@material-ui/icons';\nimport Link from '@/components/link';\nimport ContentIcon from '@/components/content-icon/content-icon';\nimport React, { FC } from 'react';\n\nimport styles from './category-item.module.scss';\n\ntype Props = {\n  id: string;\n  name: string;\n  path: string;\n  iconCode?: string;\n  isActive: boolean;\n  theme: 'blue' | 'white';\n};\n\nconst CategoryItem: FC<Props> = ({ name, path, iconCode, isActive, theme }) => {\n  return (\n    <Link\n      to={path}\n      className={classNames(styles.categoryItem, 'py-2', {\n        [styles.isActive]: isActive,\n        [styles.whiteTheme]: theme === 'white',\n        [styles.blueTheme]: theme === 'blue',\n      })}\n    >\n      {iconCode && (\n        <ContentIcon className={styles.categoryItemIcon} code={iconCode} />\n      )}\n      <span className={styles.categoryItemTitle}>{name}</span>\n      <div className={styles.chevron}>\n        <KeyboardArrowRight style={{ fontSize: 18 }} className=\"color-yellow\" />\n      </div>\n    </Link>\n  );\n};\n\nexport default CategoryItem;\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\"\n}), 'KeyboardArrowLeft');","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport styles from './category-item-list.module.scss';\nimport CategoryItem from '../category-item/category-item';\nimport Link from '@/components/link';\nimport { KeyboardArrowLeft } from '@material-ui/icons';\nimport ContentIcon from '../content-icon';\nimport { useCurrentLanguage, useTranslation } from '../i18n';\n\ntype Props = {\n  title: string;\n  titleIconCode?: string;\n  linkBack?: {\n    title: string;\n    slug: string;\n  };\n  items: React.ComponentProps<typeof CategoryItem>[];\n  theme: 'white' | 'blue';\n};\n\nconst makeFirstWordBold = (sentence: string) =>\n  sentence.split(' ').reduce((acc, curr, i) => {\n    if (i === 0) {\n      return (acc += `<strong>${curr}</strong>`);\n    }\n    return (acc += ' ' + curr);\n  }, '');\n\nconst CategoryItemList: FC<Props> = ({\n  items,\n  title,\n  titleIconCode,\n  linkBack,\n  theme,\n}) => {\n  const currentLanguage = useCurrentLanguage();\n  const { t } = useTranslation();\n  const collator = new Intl.Collator([currentLanguage]);\n  items.sort((a, b) => collator.compare(a.name, b.name));\n\n  const styledTitle = makeFirstWordBold(title);\n\n  return (\n    <div\n      className={classNames({\n        [styles.wrapper]: true,\n        [styles.whiteTheme]: theme === 'white',\n        [styles.blueTheme]: theme === 'blue',\n      })}\n    >\n      <div className={styles.header}>\n        <h2>\n          {titleIconCode && (\n            <ContentIcon code={titleIconCode} className={styles.icon} />\n          )}\n          <span dangerouslySetInnerHTML={{ __html: styledTitle }} />\n        </h2>\n        {linkBack ? (\n          <Link className={styles.linkBack} to={linkBack.slug}>\n            <KeyboardArrowLeft\n              style={{ fontSize: 18 }}\n              className={styles.chevron}\n            />{' '}\n            <span>\n              {t('back_to')}&nbsp;{linkBack.title}\n            </span>\n          </Link>\n        ) : (\n          <hr />\n        )}\n      </div>\n      {items.map((item, i) => (\n        <CategoryItem theme={theme} key={`${item.iconCode}${i}`} {...item} />\n      ))}\n    </div>\n  );\n};\n\nexport default CategoryItemList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { IMeasureAreaFragment } from 'graphql-types';\nimport CategoryItemList from './category-item-list';\nimport { useTranslation } from '../i18n';\n\ninterface IProps {\n  data: IMeasureAreaFragment[];\n  theme: 'white' | 'blue';\n  currentActiveSlug?: string;\n}\n\nconst MeasureAreaList: React.FC<IProps> = ({\n  data,\n  theme,\n  currentActiveSlug,\n}) => {\n  const { t } = useTranslation();\n\n  const listItems: React.ComponentProps<typeof CategoryItemList>['items'] = data\n    .filter(({ relationships }) => relationships.measure !== null)\n    .map(({ id, name, path, relationships }) => ({\n      id,\n      name,\n      path: path.alias,\n      iconCode: relationships.icon?.code,\n      isActive: path.alias === currentActiveSlug,\n      theme,\n    }));\n  return (\n    <CategoryItemList\n      theme={theme}\n      items={listItems}\n      title={t('current_measures')}\n    />\n  );\n};\n\nexport const query = graphql`\n  fragment MeasureArea on measure_type {\n    id\n    name\n    path {\n      alias\n    }\n    relationships {\n      measure {\n        id\n      }\n      icon {\n        code\n      }\n    }\n  }\n`;\n\nexport default MeasureAreaList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { ISituationAreaFragment } from 'graphql-types';\nimport CategoryItemList from './category-item-list';\nimport { useTranslation } from '../i18n';\n\ninterface IProps {\n  data: ISituationAreaFragment[];\n  theme: 'white' | 'blue';\n  currentActiveSlug?: string;\n}\n\nconst SituationAreaList: React.FC<IProps> = ({\n  data,\n  theme,\n  currentActiveSlug,\n}) => {\n  const { t } = useTranslation();\n\n  const listItems: React.ComponentProps<typeof CategoryItemList>['items'] = data\n    .filter(({ relationships }) => relationships.situation !== null)\n    .map(({ id, name, path, relationships }) => ({\n      id,\n      name,\n      path: path.alias,\n      iconCode: relationships.icon?.code,\n      isActive: path.alias === currentActiveSlug,\n      theme,\n    }));\n  return (\n    <CategoryItemList\n      theme={theme}\n      items={listItems}\n      title={t('life_situations')}\n    />\n  );\n};\n\nexport const query = graphql`\n  fragment SituationArea on area {\n    id\n    name\n    path {\n      alias\n    }\n    relationships {\n      situation {\n        id\n      }\n      icon {\n        code\n      }\n    }\n  }\n`;\n\nexport default SituationAreaList;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Maybe, Scalars } from '../../../graphql-types';\nimport { useTranslation } from '../i18n';\nimport Time from '../time';\n\nimport styles from './last-update.module.scss';\n\ninterface Props {\n  lastUpdated: Maybe<Scalars['Date']>;\n  isMobile: boolean;\n}\n\nconst LastUpdate: React.FC<Props> = ({ lastUpdated, isMobile }) => {\n  const { t } = useTranslation();\n  return (\n    <div\n      className={classNames({\n        [styles.lastUpdateDesktop]: !isMobile,\n        [styles.lastUpdateMobile]: isMobile,\n      })}\n    >\n      <Time\n        prefix={`${t('last_updated')} `}\n        displayTime\n        datetime={lastUpdated}\n      />\n    </div>\n  );\n};\n\nexport default LastUpdate;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport styles from './subtitle.module.scss';\n\nconst Subtitle: React.FC<{ className?: string }> = ({\n  children,\n  className,\n}) => {\n  return <p className={classNames(styles.subtitle, className)}>{children}</p>;\n};\n\nexport default Subtitle;\n","import React from 'react';\n\nimport Headline from '@/components/headline';\nimport Subtitle from '@/components/subtitle';\n\nimport styles from './topic-detail.module.scss';\nimport LastUpdate from '../last-update';\nimport { Maybe, Scalars } from '../../../graphql-types';\n\ninterface IProps {\n  title: string;\n  titleIconCode?: string;\n  processedContent: string;\n  lastUpdated: Maybe<Scalars['Date']>;\n  subtitle?: string;\n}\n\nconst TopicDetail: React.FC<IProps> = ({\n  title,\n  titleIconCode,\n  processedContent,\n  lastUpdated,\n  subtitle,\n}) => (\n  <div className={styles.topicDetail}>\n    <Headline iconCode={titleIconCode} color=\"blue\">\n      {title}\n    </Headline>\n    <LastUpdate isMobile={false} lastUpdated={lastUpdated} />\n    <article className=\"bg-white rounded px-2 pb-2 px-md-3 pb-md-3 pt-md-0 pt-2\">\n      <hr className=\"mt-0 mb-2 d-none d-md-block\" />\n      {subtitle && <Subtitle>{subtitle}</Subtitle>}\n      <div\n        className={styles.article}\n        dangerouslySetInnerHTML={{\n          __html: processedContent,\n        }}\n      />\n    </article>\n  </div>\n);\n\nexport default TopicDetail;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lastUpdateMobile\":\"last-update-module--lastUpdateMobile--1Wbl7\",\"lastUpdateDesktop\":\"last-update-module--lastUpdateDesktop--1Qx-H\"};","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"\n}), 'Room');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\"\n}), 'Event');","import React from 'react';\n\nimport { Room, Event } from '@material-ui/icons';\nimport { IRegion } from '@graphql-types';\nimport Time from '../time';\nimport { useTranslation } from '@/components/i18n';\n\ninterface IProps {\n  icon: React.ReactNode;\n}\n\nconst Marker: React.FC<IProps> = ({ icon, children }) => {\n  return (\n    <div className=\"d-flex align-items-center mb-1 color-blue\">\n      {icon}\n      &nbsp;\n      <span className=\"text-uppercase font-weight-medium\">{children}</span>\n    </div>\n  );\n};\n\ninterface IRegionsMarkerProps {\n  regions: Pick<IRegion, 'name'>[];\n}\n\nexport const RegionsMarker: React.FC<IRegionsMarkerProps> = ({ regions }) => (\n  <Marker icon={<Room />}>\n    {regions.map((region) => region.name).join(', ')}\n  </Marker>\n);\n\ninterface ITimeProps {\n  validFrom: string;\n  validTo: string;\n  displayTime: boolean;\n}\n\nexport const TimeMarker: React.FC<ITimeProps> = ({\n  validFrom,\n  validTo,\n  displayTime,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <Marker icon={<Event />}>\n      {validFrom && (\n        <Time\n          displayTime={displayTime}\n          datetime={validFrom}\n          prefix={`${t('from')} `}\n        />\n      )}\n      {validTo && (\n        <Time\n          displayTime={displayTime}\n          datetime={validTo}\n          prefix={`${t('to')} `}\n        />\n      )}\n    </Marker>\n  );\n};\n\nexport default Marker;\n","export { default } from './content-icon';\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\n\ninterface IProps {\n  className?: string;\n  code?: string;\n}\n\nconst DEFAULT_CODE = 'folder';\n\nexport const ContentIcon: FC<IProps> = ({ className, code }) => {\n  const iconClassName = classNames(className, 'material-icons');\n  return <i className={iconClassName}>{code || DEFAULT_CODE}</i>;\n};\n\nexport default ContentIcon;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"breadcrumbContainer\":\"breadcrumb-module--breadcrumbContainer--aIVuB\",\"breadcrumbItem\":\"breadcrumb-module--breadcrumbItem--3jBwP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"whiteTheme\":\"category-item-module--whiteTheme--2t2Zj\",\"isActive\":\"category-item-module--isActive--3zXaE\",\"categoryItemTitle\":\"category-item-module--categoryItemTitle--ErF2o\",\"categoryItemIcon\":\"category-item-module--categoryItemIcon--3wAWD\",\"blueTheme\":\"category-item-module--blueTheme--3d2LS\",\"categoryItem\":\"category-item-module--categoryItem--3V8HX\",\"chevron\":\"category-item-module--chevron--D9HLp\"};"],"sourceRoot":""}
<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function covid_theme($existing, $type, $theme, $path) {
  return [
    'user_login_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function covid_node_presave(NodeInterface $entity) {
  // Parse FAQ into questions and answers.
  if ($entity->hasField('field_faq_parser')
    && $entity->hasField('field_questions_answers')
  ) {
    // Only if parser field contains a value.
    if (!empty($value = $entity->get('field_faq_parser')->value)) {
      $values = $entity->get('field_questions_answers')->getValue();

      // Parse all questions and answers from the field value.
      foreach (explode(PHP_EOL, trim($value)) as $line) {
        [$question, $answer] = explode('?', $line, 2);
        // Append parsed values to the existing.
        $values[] = [
          'question' => trim($question) . '?',
          'value' => trim($answer),
        ];
      }
      // Save new values and clear the parser field.
      $entity->set('field_questions_answers', $values);
      $entity->set('field_faq_parser', NULL);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function covid_node_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var NodeInterface $entity */
  // If node is already published, then allow only admins to delete it.
  if ($operation === 'delete' && !in_array('administrator', $account->getRoles()) && $entity->isPublished()) {
    // Check if any previous revision has been published, we want to restrict access in that case as well.
    $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
    $revisionIds = $nodeStorage->revisionIds($entity);
    foreach ($revisionIds as $revisionId) {
      /** @var NodeInterface $revision */
      $revision = $nodeStorage->loadRevision($revisionId);
      if ($revision->isPublished()) {
        return AccessResult::forbidden()
          ->cachePerPermissions()
          ->cachePerUser();
      }
    }
  }
  return AccessResult::neutral();
}
